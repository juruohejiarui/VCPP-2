using System;
using System::Math;
using System::Console;

class STNode<$T$> {
	var ls : STNode, rs : STNode;
	var val : T;
	var @add : OperatorAdd<$T, T$>;
	func @constructer(val : T) : void {
		ls = null, rs = null;
		this.val = val;
	}
}

var maxn : int;
var n : int, m : int, rev : int[];
var st : long[], a : long[];

func LS(o : int, dep : int) : int {
    if (rev[dep]) return o << 1 | 1;
    else return o << 1;
}

func RS(o : int, dep : int) : int {
    if (rev[dep]) return o << 1;
    else return o << 1 | 1;
}

func init(o : int, l : int, r : int, dep : int) : void {
    if (l == r) { st[o] = a[l]; return ; }
    var mid = (l + r) >> 1;
    init(LS(o, dep), l, mid, dep - 1), init(RS(o, dep), mid + 1, r, dep - 1);
    st[o] = st[LS(o, dep)] + st[RS(o, dep)];
}

func mdfsig(o : int, l : int, r : int, p : int, vl : long, dep : int) : void {
    if (l == r) { st[o] = vl; return ; }
    var mid = (l + r) >> 1;
    if (p <= mid) mdfsig(LS(o, dep), l, mid, p, vl, dep - 1);
    else mdfsig(RS(o, dep), mid + 1, r, p, vl, dep - 1);
    st[o] = st[LS(o, dep)] + st[RS(o, dep)];
}

func qry(o : int, l : int, r : int, ql : int, qr : int, dep : int) : long {
    if (qr < l || ql > r) return 0l;
    if (ql <= l && r <= qr) return st[o];
    var mid = (l + r) >> 1;
    return qry(LS(o, dep), l, mid, ql, qr, dep - 1) + qry(RS(o, dep), mid + 1, r, ql, qr, dep - 1);
}

public func test1() : void {
    n = inputInt(), m = inputInt();
    var sz = (1 << n);
    rev = $int[n + 2], a = $long[sz + 2], st = $long[(sz + 2) << 2];
    for (var i = 1; i <= sz; i++) a[i] = inputLong();
    init(1, 1, sz, n);
    while (m--) {
        var c = inputInt(), a = inputInt();
        if (c == 1) {
            var b = inputLong();
            mdfsig(1, 1, sz, a, b, n);
        } else if (c == 2) {
            for (var i = 0; i <= a; i++) rev[i] ^= 1;
        } else if (c == 3) {
            rev[a + 1] ^= 1;
        } else if (c == 4) {
            var b = inputInt();
            print(qry(1, 1, sz, a, b, n));
        }
    }
}

public func test2() : void {
    var T = inputInt();
    while (T--) {
        var a = inputInt(), b = inputInt();
        var ans = a + b;
        for (var i = 2; i <= 300000; i++)
            ans = min(ans, (a + i - 1) / i + (b + i - 1) / i + (i - 1));
        print(ans);
    }
    print("hello world\n");
}
public func main() : void {
    test1();
    test2();
}