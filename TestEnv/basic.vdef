public class Compare<$T1, T2$> : object{
  public func @constructer() : void;
  public varfunc calculate(a : T1, b : T2) : int;
}
public class FloatCompare : Compare<$float, float$>{
  public func @constructer() : void;
  public varfunc calculate(a : float, b : float) : int;
}
public class IntCompare : Compare<$int, int$>{
  public func @constructer() : void;
  public varfunc calculate(a : int, b : int) : int;
}
namespace System{
  public func getTime() : long;
}
namespace System::Algorithm{
  private var randSeed : long;
  public func getRand() : long;
  public func getRand(l : int, r : int) : int;
  public func initRand(seed : long) : void;
  public func reverse<$T$>(array : System::Container::ArrayLike<$T$>, l : uint, r : uint) : void;
  public func reverse<$T$>(array : System::Container::ArrayLike<$T$>) : void;
  private func sort<$T$>(array : System::Container::ArrayLike<$T$>, @compare : Compare<$T, T$>, l : int, r : int) : void;
  public func sort<$T$>(array : System::Container::ArrayLike<$T$>, @compare : Compare<$T, T$>) : void;
}
namespace System::Console{
  public func getchar() : char;
  public func inputInt(base : int = 10) : int;
  public func print(x : int) : void;
  public func print(x : float) : void;
  public func print(str : char[]) : void;
  public func putchar(ch : char) : void;
}
namespace System::Container{
  public class Array<$T$> : System::Container::ArrayLike<$T$>{
    private var capacity : uint;
    private var data : T[];
    private var length : uint;
    public func @constructer() : void;
    public func @constructer(length : uint, initData : T) : void;
    public func append(dt : T) : void;
    public varfunc get(index : uint) : T;
    public varfunc getLength() : uint;
    public varfunc set(index : uint, dt : T) : void;
    public varfunc swap(x : uint, y : uint) : void;
  }
  public class ArrayLike<$T$> : System::Container::MapLike<$uint, T$>{
    public func @constructer() : void;
    public varfunc get(index : uint) : T;
    public varfunc getLength() : uint;
    public varfunc set(index : uint, data : T) : void;
    public varfunc swap(x : uint, y : uint) : void;
    public varfunc toBasicArray() : T[];
  }
  public class MapLike<$KeyT, ValueT$> : object{
    public func @constructer() : void;
    public varfunc get(index : KeyT) : ValueT;
    public varfunc set(index : KeyT, data : ValueT) : void;
  }
  public class String : System::Container::Array<$char$>{
    public func @constructer() : void;
    public func @constructer(length : uint, initChar : char) : void;
    public func @constructer(source : System::Container::String) : void;
    public varfunc toBasicArray() : char[];
  }
}
namespace System::Math{
  public func gcd(a : long, b : long) : long;
  public func max(a : int, b : int) : int;
  public func min(a : int, b : int) : int;
  public func pow(a : long, b : long) : long;
}
